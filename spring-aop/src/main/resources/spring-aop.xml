<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">
    <!-- 通过aop命名空间的<aop:aspectj-autoproxy />声明自动为spring容器中那些配置@aspectJ切面的bean创建代理，织入切面 -->
    <aop:aspectj-autoproxy proxy-target-class="true"/>

    <!-- 声明一个需要织入到虚拟切面的逻辑（切面） -->
    <!--
    <bean id="logAspect" class="star.plan.demo.aop.aspect.LogAspect"></bean>

    <aop:config>
        <aop:aspect ref="logAspect">
            <aop:pointcut expression="execution(* star.plan.demo.aop.service..*(..))" id="logPointcut"/>
            <aop:before method="before" pointcut-ref="logPointcut"/>
            <aop:after-returning method="afterReturn" returning="joinPoint" pointcut-ref="logPointcut"/>
            <aop:after method="after" pointcut-ref="logPointcut"/>
            <aop:after-throwing method="afterThrow" pointcut-ref="logPointcut"/>
        </aop:aspect>
    </aop:config>
    -->

    <!-- 具体的方法就是切点 -->
    <!-- 如何定义一个具体的方法 -->
    <!-- 权限修饰符(public/private/protected可省略) 返回值(Void/自定义类型,用*表示任意返回值类型，必填的) 属于哪个包哪个类(省略).方法名称(参数列表,必填) throws 异常类型(可省略) -->
    <!-- 参数列表的不同跟什么有关呢？
         1、参数的个数
         2、参数的顺序
         3、参数的类型

         跟参数的名字没有任何关系,形式参数
         如果一个方法用final修饰了，就意味着这个方法不能被重写
         也就意味着我们的子类不能对这个方法进行扩展
         代理是是无法实现的
     -->
    <!-- execution(public * com.gupaoedu.vip.aop.service..*.*(..))-->
</beans>