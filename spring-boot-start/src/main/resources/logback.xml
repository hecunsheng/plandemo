<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="60 seconds">

    <springProperty scope="context" name="log.level" source="log.level"/>
    <springProperty scope="context" name="log.path" source="log.path"/>
    <springProperty scope="context" name="log.moduleName" source="log.moduleName"/>
    <springProperty scope="context" name="log.max" source="log.max"/>
    <springProperty scope="context" name="log.routingKey" source="log.routingKey"/>


    <!-- 日志级别 -->
    <property name="log.root.level" value="${log.level}"/>
    <!-- 其他日志级别 -->
    <property name="log.other.level" value="${log.level}"/>
    <!-- 日志路径，这里是相对路径，web项目eclipse下会输出到eclipse的安装目录下，如果部署到linux上的tomcat下，会输出到tomcat/bin目录 下 -->
    <property name="log.base" value="${log.path}"/>
    <!-- 模块名称， 影响日志配置名，日志文件名 -->
    <property name="log.moduleName" value="${log.moduleName}"/>
    <!-- 日志文件大小,超过这个大小将被压缩 -->
    <property name="log.max.size" value="${log.max}"/>
    <property name="NORMAL_PATTERN"
              value="%d{yyyy-MM-dd HH:mm:ss.SSS} [traceId:%X{traceId}] [%thread] %-5level %logger{50} - %msg%n"/>
    <!--自定义-->
    <conversionRule conversionWord="traceId" converterClass="org.springframework.boot.logging.logback.ColorConverter"/>

    <!--控制台输出 -->
    <appender name="STDOUT-APPENDER" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <Pattern>${NORMAL_PATTERN}</Pattern>
        </encoder>
    </appender>

    <!-- 用来保存输出所有级别的日志 -->
    <appender name="DEFAULT-APPENDER" class="ch.qos.logback.core.rolling.RollingFileAppender">

        <File>${log.base}/${log.moduleName}-default.log</File>

        <!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件。 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">

            <FileNamePattern>${log.base}/history/default/${log.moduleName}-default-%d{yyyy-MM-dd}.%i.log
            </FileNamePattern>

            <!-- 文件输出日志 (文件大小策略进行文件输出，超过指定大小对文件备份) -->
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>${log.max.size}</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>

            <!--最大保留历史日志的天数-->
            <maxHistory>5</maxHistory>
            <!--最大保留日志文件的总大小-->
            <totalSizeCap>5GB</totalSizeCap>

        </rollingPolicy>

        <!-- 日志输出的文件的格式 -->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${NORMAL_PATTERN}</pattern>
        </encoder>

    </appender>

    <!-- 只用保存输出ERROR级别的日志 -->
    <appender name="ERROR-APPENDER" class="ch.qos.logback.core.rolling.RollingFileAppender">

        <File>${log.base}/${log.moduleName}-error.log</File>

        <!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件。 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <FileNamePattern>${log.base}/history/error/${log.moduleName}-error-%d{yyyy-MM-dd}.%i.log
            </FileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>${log.max.size}</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>

        <!-- 日志输出的文件的格式 -->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${NORMAL_PATTERN}</pattern>
        </encoder>

        <!-- 下面为配置只输出error级别的日志 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>ERROR</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>

    </appender>

    <!-- 只用保存输出WARN级别的日志 -->
    <appender name="WARN-APPENDER" class="ch.qos.logback.core.rolling.RollingFileAppender">

        <File>${log.base}/${log.moduleName}-warn.log</File>

        <!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件。 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <FileNamePattern>${log.base}/history/warn/${log.moduleName}-warn-%d{yyyy-MM-dd}.%i.log
            </FileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>${log.max.size}</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>

        <!-- 日志输出的文件的格式 -->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${NORMAL_PATTERN}</pattern>
        </encoder>

        <!-- 下面为配置只输出warn级别的日志 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>WARN</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>

    </appender>

    <!-- 只用保存输出DEBUG级别的日志 -->
    <appender name="DEBUG-APPENDER" class="ch.qos.logback.core.rolling.RollingFileAppender">

        <File>${log.base}/${log.moduleName}-debug.log</File>

        <!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件。 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <FileNamePattern>${log.base}/history/debug/${log.moduleName}-debug-%d{yyyy-MM-dd}.%i.log
            </FileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>${log.max.size}</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>

        <!-- 日志输出的文件的格式 -->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${NORMAL_PATTERN}</pattern>
        </encoder>

        <!-- 下面为配置只输出debug级别的日志 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>DEBUG</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>

    </appender>

    <!-- 只用保存输出INFO级别的日志 -->
    <appender name="INFO-APPENDER" class="ch.qos.logback.core.rolling.RollingFileAppender">

        <File>${log.base}/${log.moduleName}-info.log</File>

        <!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件。 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <FileNamePattern>${log.base}/history/info/${log.moduleName}-info-%d{yyyy-MM-dd}.%i.log
            </FileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>${log.max.size}</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>

        <!-- 日志输出的文件的格式 -->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${NORMAL_PATTERN}</pattern>
        </encoder>

        <!-- 下面为配置只输出info级别的日志 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>INFO</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>

    </appender>

    <!-- 只用保存输出TRACE级别的日志 -->
    <appender name="TRACE-APPENDER" class="ch.qos.logback.core.rolling.RollingFileAppender">

        <File>${log.base}/${log.moduleName}-trace.log</File>

        <!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件。 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <FileNamePattern>${log.base}/history/trace/${log.moduleName}-trace-%d{yyyy-MM-dd}.%i.log
            </FileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>${log.max.size}</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>

        <!-- 日志输出的文件的格式 -->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${NORMAL_PATTERN}</pattern>
        </encoder>

        <!-- 下面为配置只输出trace级别的日志 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>TRACE</level>
            <onMatch>ACCEPT</onMatch>
            <onMismatch>DENY</onMismatch>
        </filter>

    </appender>

    <!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
    <!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
    <!-- 添加附加的appender,最多只能添加一个 -->
    <appender name="ASYNC-DEFAULT-APPENDER" class="ch.qos.logback.classic.AsyncAppender">
        <discardingThreshold>0</discardingThreshold>
        <queueSize>256</queueSize>
        <includeCallerData>true</includeCallerData>
        <appender-ref ref="DEFAULT-APPENDER"/>
    </appender>


    <!-- 为某个包下的所有类的指定Appender 这里也可以指定类名称例如：com.micro -->
    <logger name="com.example.springbootstart" additivity="false">
        <level value="${log.other.level}"/>
        <appender-ref ref="STDOUT-APPENDER"/>
        <appender-ref ref="ASYNC-DEFAULT-APPENDER"/>
        <appender-ref ref="ERROR-APPENDER"/>
        <appender-ref ref="WARN-APPENDER"/>
        <appender-ref ref="DEBUG-APPENDER"/>
        <appender-ref ref="INFO-APPENDER"/>
        <appender-ref ref="TRACE-APPENDER"/>
    </logger>

    <!-- root将级别为${log.root.level}及大于${log.root.level}的日志信息交给已经配置好的名为“Console”的appender处理，“Console”appender将信息打印到Console,其它同理 -->
    <root level="${log.root.level}">
        <appender-ref ref="STDOUT-APPENDER"/>
        <appender-ref ref="ASYNC-DEFAULT-APPENDER"/>
        <appender-ref ref="ERROR-APPENDER"/>
        <appender-ref ref="WARN-APPENDER"/>
        <appender-ref ref="DEBUG-APPENDER"/>
        <appender-ref ref="INFO-APPENDER"/>
        <appender-ref ref="TRACE-APPENDER"/>
    </root>

</configuration>